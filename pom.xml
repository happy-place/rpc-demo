<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>rpc-demo</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>cxf</module>
        <module>grpc</module>
        <module>thrift</module>
        <module>avro</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <versions-maven-source-plugin>3.0.1</versions-maven-source-plugin>
        <versions-maven-javadoc-plugin>3.0.0</versions-maven-javadoc-plugin>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <scala.version>2.12.5</scala.version>
        <java.version>1.8</java.version>
        <junit.version>4.13.1</junit.version>
        <log4j.version>1.2.16</log4j.version>
        <h2.version>1.4.200</h2.version>
        <mysql-connector>5.1.39</mysql-connector>
        <fastjson.version>1.2.62</fastjson.version>
        <snakeyaml.version>1.25</snakeyaml.version>
        <common-io.version>2.6</common-io.version>
        <lang3.version>3.5</lang3.version>
        <cxf.version>3.1.6</cxf.version>
        <protobuf.version>3.11.4</protobuf.version>
        <netty.version>5.0.0.Alpha2</netty.version>
        <grpc.version>1.29.0</grpc.version>
        <libthrift.version>0.13.0</libthrift.version>
        <avro.version>1.7.5</avro.version>
    </properties>

    <repositories>
        <repository>
            <id>Maven Central Repository</id>
            <name>Maven Central Repository</name>
            <url>http://central.maven.org/maven2/</url>
        </repository>
    </repositories>

    <dependencies>

    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
                <version>${scala.version}</version>
            </dependency>

            <!-- h2 数据源依赖 -->
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
                <scope>runtime</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-rt-frontend-jaxws</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-rt-transports-http</artifactId>
                <version>${cxf.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.cxf</groupId>
                <artifactId>cxf-rt-transports-http-jetty</artifactId>
                <version>${cxf.version}</version>
            </dependency>

            <dependency>
                <groupId>com.google.protobuf</groupId>
                <artifactId>protobuf-java</artifactId>
                <version>${protobuf.version}</version>
            </dependency>

            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-all</artifactId>
                <version>${netty.version}</version>
            </dependency>

            <dependency>
                <groupId>io.grpc</groupId>
                <artifactId>grpc-all</artifactId>
                <version>${grpc.version}</version>
            </dependency>

            <dependency>
                <groupId>io.grpc</groupId>
                <artifactId>protoc-gen-grpc-java</artifactId>
                <version>1.29.0</version>
                <type>pom</type>
            </dependency>

            <dependency>
                <groupId>org.apache.thrift</groupId>
                <artifactId>libthrift</artifactId>
                <version>${libthrift.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro</artifactId>
                <version>${avro.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro-ipc</artifactId>
                <version>${avro.version}</version>
            </dependency>


            <!-- Junit -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- MySQL 连接驱动依赖 -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql-connector}</version>
            </dependency>

            <!-- fastjson -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>

            <dependency>
                <groupId>org.yaml</groupId>
                <artifactId>snakeyaml</artifactId>
                <version>${snakeyaml.version}</version>
            </dependency>

            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>${common-io.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${lang3.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>


    <build>
        <!-- )可执行jar(由执行入口main(),通常需要拷贝maven依赖到lib包,部署时,lib随jar一起拷贝发布) -->
        <!-- jar的名称 :未自定义,则与mvn-Rep发布的带版本号风格,自定义,则覆盖-->
        <finalName>query-bi</finalName>
        <resources>
            <!--源项目src/main/resources目录下凡是包含.xml,.properties文件的目录,拷贝到发布jar包根(class)下 -->
            <resource>
                <!-- cp from -->
                <directory>src/main/resources</directory>
                <!-- cp to -->
                <targetPath>${project.build.directory}/classes</targetPath>
                <filtering>true</filtering>
                <includes>
                    <include>*.xml</include>
                    <include>*.properties</include>
                </includes>
            </resource>
            <!--/META-IN目录下专门给 结合com.alibaba.dubbo.container.Main拷贝了一份ioc配置,用于启动ioc容器,注册dubbo服务 -->
            <resource>
                <!-- cp from -->
                <directory>src/main/resources</directory>
                <!-- cp to -->
                <targetPath>${project.build.directory}/classes/META-INF</targetPath>
                <filtering>true</filtering>
                <includes>
                    <include>*.xml</include>
                    <include>*.properties</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <!-- 配置代码的编译JDK版本 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <!-- scala 编译-->
            <plugin>
                <groupId>net.alchim31.maven</groupId>
                <artifactId>scala-maven-plugin</artifactId>
                <version>3.2.2</version>
                <executions>
                    <execution>
                        <id>scala-compile-first</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>add-source</goal>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <scalaVersion>${scala.version}</scalaVersion>
                </configuration>
            </plugin>
            <!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 -->
            <!-- 1.源项目打包完成后,以 mainClass定义的类作为主类,该jar则由普通jar转变为可以执行的jar
                  2.其执行依赖的清单记录在jar/META-INF/MANIFEST.MF文件中
                  3.jar执行依赖的资源,实际存储在项目开发部署路径edu-service-user/target/lib中,
                    此lib路径需要随jar一起拷贝到linux下才能运行
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <skipTests>true</skipTests>
                </configuration>
            </plugin>
        </plugins>
    </build>


</project>